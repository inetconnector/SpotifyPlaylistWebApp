@using System.Globalization
@using System.Text.Json
@using Microsoft.Extensions.Localization
@using SpotifyPlaylistWebApp
@inject IStringLocalizer<SharedResource> L
@{
    Layout = "Layout";
    ViewData["Title"] = "Spotify ‚Üí Plex";

    var playlists = ViewBag.Playlists as List<SelectListItem>
                    ?? new List<SelectListItem>();
    var hasPlex = !string.IsNullOrEmpty(Context.Session.GetString("PlexAuthToken"));
    var hasSpotify = !string.IsNullOrEmpty(Context.Session.GetString("SpotifyAccessToken"));
}

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.Name">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>@ViewData["Title"]</title>
</head>

<body class="min-h-screen bg-gradient-to-b from-[#0b0f17] to-[#141a27] text-white font-sans">

<div class="max-w-xl mx-auto mt-16 p-8 bg-white/5 rounded-3xl shadow-xl backdrop-blur-sm text-center">

    <div class="flex justify-center mb-4">
        <img src="/images/plex-spotify.svg" alt="Spotify‚ÜíPlex"
             class="h-20 w-auto mx-auto drop-shadow-[0_0_8px_rgba(255,160,0,0.4)]"
             style="max-height:80px;"/>
    </div>

    <h1 class="text-3xl font-bold mb-3">Spotify ‚Üí Plex</h1>
    <p class="text-gray-300 mb-8">@L["PlexActions_SyncSpotifyPlaylistsWithPlex"]</p>

    @* ================================
           STATUS / CONNECTION INFO
           ================================== *@
    @if (!hasPlex)
    {
        <div class="bg-red-600/30 border border-red-500 rounded-lg p-3 mb-4">
            ‚ö†Ô∏è @L["SpotifyToPlex_TokenExpired"]
        </div>
        <a href="/HomePlex/GetPlexPin"
           class="inline-block px-4 py-2 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg text-white font-semibold hover:brightness-110">
            üîê @L["SpotifyToPlex_OpenPlexLogin"]
        </a>
    }
    else if (!hasSpotify)
    {
        <div class="bg-yellow-600/20 border border-yellow-500 rounded-lg p-3 mb-4">
            üéß @L["SpotifyToPlex_Info"]
        </div>
        <a href="/Home/Login?returnUrl=/HomePlex/SpotifyToPlex"
           class="inline-block px-4 py-2 bg-gradient-to-r from-green-400 to-emerald-600 rounded-lg text-black font-semibold hover:brightness-110">
            üéµ @L["Index_Mit_Spotify_verbinden"]
        </a>
    }
    else if (playlists.Count == 0)
    {
        <p class="text-gray-400 mb-6">@L["SpotifyToPlex_Waiting"]</p>
        <div class="animate-spin h-6 w-6 border-2 border-t-transparent border-orange-500 rounded-full mx-auto"></div>
    }
    else
    {
        @* ================================
               SPOTIFY-PLAYLIST DROPDOWN
               ================================== *@
        <div class="text-left mb-6">
            <label for="playlistSelect" class="block text-sm text-gray-400 mb-2">
                @L["SpotifyToPlex_SelectPlaylist"]
            </label>

            <div class="flex space-x-2">
                <select id="playlistSelect" name="playlistId"
                        class="flex-1 bg-gray-800 border border-gray-700 rounded-lg p-2 w-full focus:ring-2 focus:ring-orange-500">
                    @foreach (var item in playlists)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>

                <button type="button" id="btnShowPlaylist"
                        class="px-3 bg-orange-500 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                        title="@L["SpotifyToPlex_ShowPlaylist"]">
                    ?
                </button>
            </div>
        </div>

        <hr class="my-8 border-gray-700">

        @* ================================
               PLEX-PLAYLIST DROPDOWN
               ================================== *@
        <div class="text-left mb-6">
            <label for="plexSelect" class="block text-sm text-gray-400 mb-2">
                @L["PlexActions_PlexPlaylists_Title"]
            </label>

            <div class="flex space-x-2">
                <select id="plexSelect"
                        class="flex-1 bg-gray-800 border border-gray-700 rounded-lg p-2 w-full focus:ring-2 focus:ring-orange-500">
                    <option>@L["PlexActions_LoadingPlexPlaylists"]...</option>
                </select>

                <button type="button" id="btnShowPlexPlaylist"
                        class="px-3 bg-orange-500 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                        title="@L["SpotifyToPlex_ShowPlaylist"]">
                    ?
                </button>

                <!-- ‚úèÔ∏è Rename button -->
                <button type="button" id="btnRenamePlex"
                        class="px-3 bg-blue-500 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                        title="@L["SpotifyToPlex_RenamePlaylist"]">
                    ‚úèÔ∏è
                </button>

                <button type="button" id="btnDeletePlex"
                        class="px-3 bg-red-600 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                        title="@L["SpotifyToPlex_DeletePlaylist"]">
                    üóëÔ∏è
                </button>
            </div>
        </div>

        @* Live Export (SSE) *@
        <button type="button" id="btnLiveExport"
                class="w-full py-3.5 bg-gradient-to-r from-green-400 to-emerald-600
                                           text-black font-semibold rounded-xl shadow-[0_4px_12px_rgba(0,0,0,0.3)]
                                           hover:brightness-110 active:translate-y-[1px] transition-all duration-150 mb-3">
            ‚ö° @L["SpotifyToPlex_LiveExport"]
        </button>

        @* Disconnect *@
        <form method="post" action="/HomePlex/DisconnectPlex">
            @Html.AntiForgeryToken()
            <button type="submit"
                    class="w-full py-3.5 bg-gradient-to-r from-gray-600 to-gray-800
                                                   text-white font-semibold rounded-xl shadow-[0_4px_12px_rgba(0,0,0,0.3)]
                                                   hover:brightness-110 active:translate-y-[1px] transition-all duration-150">
                üóëÔ∏è @L["PlexActions_Disconnect"]
            </button>
        </form>
    }
</div>

@* ================================
       MODAL: Playlist Inhalt
       ================================== *@
<div id="playlistModal" class="hidden fixed inset-0 bg-black/70 flex items-center justify-center z-50">
    <div class="bg-gray-900 p-6 rounded-2xl shadow-2xl max-w-lg w-full text-left text-white">
        <h2 class="text-xl font-semibold mb-3">@L["SpotifyToPlex_PlaylistContent"]</h2>
        <div id="playlistTracks" class="max-h-96 overflow-y-auto space-y-1 text-sm text-gray-300 mb-4"></div>
        <button id="closeModal"
                class="w-full py-2 bg-gradient-to-r from-gray-700 to-gray-800 rounded-lg hover:brightness-110">
            @L["SpotifyToPlex_Ok"]
        </button>
    </div>
</div>

<script>
        const T = {
            Starting: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Starting"].Value)),
            Added: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Added"].Value)),
            Missing: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Missing"].Value)),
            Done: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Done"].Value)),
            Total: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Total"].Value)),
            ConnectionLost: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_ConnectionLost"].Value)),
            Loading: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_Loading"].Value)),
            NoTracksFound: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_NoTracksFound"].Value)),
            LoadError: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_LoadError"].Value)),
            LoadingTracks: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_LoadingTracks"].Value)),
            ExportStopped: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_ExportStopped"].Value)),
            NowExporting: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_NowExporting"].Value)),
            DeleteConfirm: @Html.Raw(JsonSerializer.Serialize(L["SpotifyToPlex_DeleteConfirm"].Value))
        };

        let liveEvt = null;

        document.addEventListener("DOMContentLoaded", () => {
            const select = document.getElementById("playlistSelect");
            const nameInput = document.getElementById("selectedPlaylistName");
            const idInput = document.getElementById("selectedPlaylistId");
            const closeModalBtn = document.getElementById("closeModal");
            const modal = document.getElementById("playlistModal");


            if (closeModalBtn && modal) {
                closeModalBtn.addEventListener("click", () => modal.classList.add("hidden"));
            }

            if (select && select.options.length > 0 && nameInput && idInput) {
                const opt = select.options[0];
                nameInput.value = opt.text;
                idInput.value = opt.value;
            }

            select?.addEventListener("change", () => {
                const opt = select.options[select.selectedIndex];
                nameInput.value = opt.text;
                idInput.value = opt.value;
            });

            // Live Export Button
            document.getElementById("btnLiveExport")?.addEventListener("click", () => {
                const playlistSelect = document.getElementById("playlistSelect");
                if (!playlistSelect) return;
                const playlistId = playlistSelect.value;
                const playlistName = playlistSelect.options[playlistSelect.selectedIndex].text;
                startLiveExport(playlistId, playlistName);
            });

            loadPlexPlaylistsDropdown();
        });

        async function loadPlexPlaylistsDropdown() {
            const plexSelect = document.getElementById("plexSelect");
            plexSelect.innerHTML = `<option>@L["PlexActions_LoadingPlexPlaylists"]...</option>`;

            try {
                const res = await fetch("/HomePlex/GetPlexPlaylists");
                const data = await res.json();

                if (!data.success) {
                    plexSelect.innerHTML = `<option class='text-red-400'>${data.message}</option>`;
                    return;
                }

                plexSelect.innerHTML = data.playlists.length
                    ? data.playlists.map(p => `<option value="${p.ratingKey}">${p.title ?? "&lt;NoName&gt;"}</option>`).join("")
                    : `<option>@L["PlexActions_NoPlexPlaylists"]</option>`;
            } catch {
                plexSelect.innerHTML = `<option class='text-red-400'>@L["SpotifyToPlex_LoadError"]</option>`;
            }
        }

        async function startLiveExport(playlistId, playlistName) {
            const modal = document.getElementById("liveExportModal");
            const log = document.getElementById("liveLog");
            const bar = document.getElementById("liveBar");
            const progress = document.getElementById("liveProgress");
            const summary = document.getElementById("liveSummary");
            const now = document.getElementById("liveNow");

            modal.classList.remove("hidden");
            log.innerHTML = "";
            bar.style.width = "0%";
            progress.textContent = T.Starting;
            summary.classList.add("hidden");
            summary.innerHTML = "";
            now.textContent = "";

            if (liveEvt) { try { liveEvt.close(); } catch { } }

            liveEvt = new EventSource(
                `/HomePlex/ExportOneLive?playlistId=${encodeURIComponent(playlistId)}&playlistName=${encodeURIComponent(playlistName)}`
            );

            liveEvt.onmessage = (e) => {
                const data = e.data || "";

                if (data.startsWith("‚úÖ")) {
                    appendLiveLog(`<div class="text-green-400">${data}</div>`);
                    return;
                }
                if (data.startsWith("‚ùå")) {
                    appendLiveLog(`<div class="text-red-400">${data}</div>`);
                    return;
                }

                if (data.startsWith("progress:")) {
                    const parts = data.split(":");
                    const added = parseInt(parts[1] || "0");
                    const miss = parseInt(parts[2] || "0");
                    const total = parseInt(parts[3] || "0");
                    const pct = total > 0 ? Math.round(((added + miss) / total) * 100) : 0;
                    bar.style.width = pct + "%";
                    progress.textContent = `‚úÖ ${added} ${T.Added}   ‚ùå ${miss} ${T.Missing}   (${pct}%)`;
                    return;
                }
                if (data.startsWith("now:")) {
                    now.textContent = `${T.NowExporting}: ${data.substring(4)}`;
                    appendLiveLog(`üéß ${data.substring(4)}`);
                    return;
                }
                if (data.startsWith("done:")) {
                    const parts = data.split(":");
                    const added = parseInt(parts[1] || "0");
                    const miss = parseInt(parts[2] || "0");
                    const failed = parseInt(parts[3] || "0");
                    const total = parseInt(parts[4] || "0");

                    bar.style.width = "100%";
                    progress.innerHTML = `<b>${T.Done}</b>`;
                    summary.classList.remove("hidden");
                    summary.innerHTML =
                        `‚úÖ ${added} ${T.Added} &nbsp;|&nbsp; ‚ùå ${miss} ${T.Missing} &nbsp;|&nbsp; ‚ö†Ô∏è ${failed} failed &nbsp;|&nbsp; üéµ ${total} ${T.Total}`;
                    document.getElementById("downloadMissingContainer")?.classList.remove("hidden");
                    try { liveEvt.close(); } catch { }
                    liveEvt = null;
                    return;
                }


                appendLiveLog(data.startsWith("ERROR")
                    ? `<span class='text-red-400'>‚ùå ${data}</span>`
                    : data);
            };

            liveEvt.onerror = () => {
                appendLiveLog("<span class='text-red-400'>‚ùå " + T.ConnectionLost + "</span>");
                try { liveEvt.close(); } catch { }
                liveEvt = null;
            };
        }

        function appendLiveLog(html) {
            const log = document.getElementById("liveLog");
            log.innerHTML += `<div>${html}</div>`;
            log.scrollTop = log.scrollHeight;
        }

        // ============================================================
        // üî∏ Global click handler for all dynamic buttons (? / üóëÔ∏è / OK / Stop)
        // ============================================================
        document.addEventListener("click", async (ev) => {
            const target = ev.target;

            // Show Spotify playlist modal (?)
            if (target.id === "btnShowPlaylist") {
                const select = document.getElementById("playlistSelect");
                const playlistId = select?.value;
                const listDiv = document.getElementById("playlistTracks");
                const modal = document.getElementById("playlistModal");
                if (!playlistId || !listDiv || !modal) return;

                listDiv.innerHTML = `<div class='text-center text-gray-400'>${T.Loading}</div>`;
                modal.classList.remove("hidden");

                try {
                    const res = await fetch(`/HomePlex/GetPlaylistTracks?playlistId=${encodeURIComponent(playlistId)}`);
                    const data = await res.json();
                    listDiv.innerHTML = data.success
                        ? (data.tracks.length
                            ? data.tracks.map(t => `<div>üéµ <b>${t.title}</b> ‚Äì ${t.artist}</div>`).join("")
                            : `<div class='text-gray-400'>${T.NoTracksFound}</div>`)
                        : `<div class='text-red-400'>${data.message}</div>`;
                } catch {
                    listDiv.innerHTML = `<div class='text-red-400'>${T.LoadError}</div>`;
                }
            }
                    // üîπ Rename Plex playlist (‚úèÔ∏è) ‚Üí nur Reload, keine Zwischen-Loads mit altem Key
            if (target.id === "btnRenamePlex") {
                const plexSelect = document.getElementById("plexSelect");
                const ratingKey = plexSelect?.value;
                if (!ratingKey) return alert("No Plex playlist selected.");

                const currentName = plexSelect.options[plexSelect.selectedIndex].text;
                const newName = prompt(T.RenamePrompt ?? "Enter new name:", currentName);
                if (!newName || newName.trim() === currentName.trim()) return;

                // UI in "busy" setzen, Interaktionen verhindern
                plexSelect.disabled = true;
                plexSelect.innerHTML = `<option>${T.Loading}</option>`;
                document.getElementById("btnShowPlexPlaylist")?.setAttribute("disabled", "disabled");
                document.getElementById("btnDeletePlex")?.setAttribute("disabled", "disabled");
                document.getElementById("btnRenamePlex")?.setAttribute("disabled", "disabled");

                try {
                    const res = await fetch(`/HomePlex/RenamePlexPlaylist`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ ratingKey, newName })
                    });
                    const data = await res.json();
                    if (data.success) {
                        alert("‚úÖ " + data.message);
                        // Kein weiterer Fetch mit altem ratingKey ‚Üí direkt Full-Reload
                        setTimeout(() => window.location.reload(), 400);
                    } else {
                        alert("‚ùå " + data.message);
                        // Falls fehlgeschlagen, UI wieder freigeben
                        plexSelect.disabled = false;
                        ["btnShowPlexPlaylist","btnDeletePlex","btnRenamePlex"].forEach(id =>
                            document.getElementById(id)?.removeAttribute("disabled"));
                    }
                } catch {
                    alert("‚ùå " + T.LoadError);
                    plexSelect.disabled = false;
                    ["btnShowPlexPlaylist","btnDeletePlex","btnRenamePlex"].forEach(id =>
                        document.getElementById(id)?.removeAttribute("disabled"));
                }
            }

            // üîπ Delete Plex playlist (üóëÔ∏è) ‚Üí direkt Full-Reload, kein Zwischen-Load
            if (target.id === "btnDeletePlex") {
                const plexSelect = document.getElementById("plexSelect");
                const ratingKey = plexSelect?.value;
                if (!ratingKey) return alert("No Plex playlist selected.");
                if (!confirm(T.DeleteConfirm)) return;

                // Busy-UI
                plexSelect.disabled = true;
                plexSelect.innerHTML = `<option>${T.Loading}</option>`;
                document.getElementById("btnShowPlexPlaylist")?.setAttribute("disabled", "disabled");
                document.getElementById("btnDeletePlex")?.setAttribute("disabled", "disabled");
                document.getElementById("btnRenamePlex")?.setAttribute("disabled", "disabled");

                try {
                    const res = await fetch(`/HomePlex/DeletePlexPlaylist?ratingKey=${encodeURIComponent(ratingKey)}`, {
                        method: "DELETE"
                    });
                    const data = await res.json();
                    if (data.success) {
                        alert("‚úÖ " + data.message);
                        // Wichtig: kein loadPlexPlaylistsDropdown() ‚Üí alter Key w√§re ung√ºltig
                        setTimeout(() => window.location.reload(), 400);
                    } else {
                        alert("‚ùå " + data.message);
                        // UI freigeben, falls fehlgeschlagen
                        plexSelect.disabled = false;
                        ["btnShowPlexPlaylist","btnDeletePlex","btnRenamePlex"].forEach(id =>
                            document.getElementById(id)?.removeAttribute("disabled"));
                    }
                } catch {
                    alert("‚ùå " + T.LoadError);
                    plexSelect.disabled = false;
                    ["btnShowPlexPlaylist","btnDeletePlex","btnRenamePlex"].forEach(id =>
                        document.getElementById(id)?.removeAttribute("disabled"));
                }
            }



            // Show Plex playlist modal (?)
            if (target.id === "btnShowPlexPlaylist") {
                const plexSelect = document.getElementById("plexSelect");
                const ratingKey = plexSelect?.value;
                if (!ratingKey) return alert("No Plex playlist selected.");

                try {
                    const res = await fetch(`/HomePlex/GetPlexPlaylistTracks?ratingKey=${encodeURIComponent(ratingKey)}`);
                    const data = await res.json();
                    const modal = document.getElementById("playlistModal");
                    const listDiv = document.getElementById("playlistTracks");
                    if (modal && listDiv) {
                        listDiv.innerHTML = data.tracks?.length
                            ? data.tracks.map(t => `<div>üéµ <b>${t.title}</b> ‚Äì ${t.artist}</div>`).join("")
                            : `<div class='text-gray-400'>${T.NoTracksFound}</div>`;
                        modal.classList.remove("hidden");
                    }
                } catch {
                    alert(T.LoadError);
                }
            }
             
                    // OK ‚Üí close modal + refresh
            if (target.id === "btnCloseLive") {
                const modal = document.getElementById("liveExportModal");
                if (modal) {
                    modal.style.transition = "opacity 0.4s ease";
                    modal.style.opacity = "0";
                    setTimeout(() => {
                        modal.classList.add("hidden");
                        modal.style.opacity = "1";
                        // üîÅ Refresh after close
                        setTimeout(() => window.location.reload(), 500);
                    }, 400);
                }
            }

            // Stop ‚Üí cancel export + refresh
            if (target.id === "btnStopLive") {
                try {
                    if (typeof liveEvt !== "undefined" && liveEvt) {
                        liveEvt.close();
                        liveEvt = null;
                    }
                } catch (e) {
                    console.warn("EventSource close failed", e);
                }

                const log = document.getElementById("liveLog");
                if (log) {
                    log.innerHTML += `<div class='text-yellow-400'>‚èπ ${T.ExportStopped}</div>`;
                    log.scrollTop = log.scrollHeight;
                }

                const progress = document.getElementById("liveProgress");
                if (progress) progress.textContent = `‚èπ ${T.ExportStopped}`;

                const modal = document.getElementById("liveExportModal");
                if (modal) {
                    modal.style.transition = "opacity 0.4s ease";
                    modal.style.opacity = "0";
                    setTimeout(() => {
                        modal.classList.add("hidden");
                        modal.style.opacity = "1";
                        // üîÅ Full refresh after stop
                        setTimeout(() => window.location.reload(), 500);
                    }, 400);
                }
            }

        });
    </script>


@* ================================
       MODAL: Live Export Status
       ================================== *@
<div id="liveExportModal" class="hidden fixed inset-0 bg-black/70 flex items-center justify-center z-50">
    <div class="bg-gray-900 p-6 rounded-2xl shadow-2xl max-w-2xl w-full text-left text-white">
        <h2 class="text-xl font-semibold mb-1">üéß @L["SpotifyToPlex_LiveExportStatus"]</h2>
        <div id="liveNow" class="text-sm text-gray-300 mb-2"></div>
        <div id="liveLog" class="max-h-96 overflow-y-auto text-sm font-mono bg-black/40 rounded-lg p-3 mb-3"></div>
        <div id="liveProgress" class="text-gray-300 text-sm mb-2">@L["SpotifyToPlex_Initializing"]</div>
        <div class="w-full bg-gray-700 rounded-full h-2 mb-4">
            <div id="liveBar" class="bg-orange-500 h-2 rounded-full transition-all duration-200" style="width:0%;"></div>
        </div>
        <div id="liveSummary" class="hidden text-sm text-gray-200 mb-3"></div>
        <div id="downloadMissingContainer" class="hidden mb-4 text-center">
            <a id="btnDownloadMissing"
               href="/HomePlex/DownloadMissing"
               class="inline-block px-4 py-2 bg-gradient-to-r from-red-500 to-orange-500
                          text-white rounded-lg font-semibold shadow hover:brightness-110">
                üì• @L["SpotifyToPlex_DownloadMissingCsv"]
            </a>
        </div>
        <div class="grid grid-cols-2 gap-2">
            <button id="btnCloseLive" class="py-2 bg-gradient-to-r from-gray-700 to-gray-800 rounded-lg hover:brightness-110">
                @L["SpotifyToPlex_Ok"]
            </button>
            <button id="btnStopLive" class="py-2 bg-gradient-to-r from-rose-600 to-red-700 rounded-lg hover:brightness-110">
                ‚èπ @L["SpotifyToPlex_Stop"]
            </button>
        </div>
    </div>
</div>

<style>
        #liveExportModal {
            transition: opacity 0.4s ease;
        }
    </style>

</body>
</html>