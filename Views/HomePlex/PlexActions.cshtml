@using System.Globalization
@using Microsoft.Extensions.Localization
@using SpotifyPlaylistWebApp
@inject IStringLocalizer<SharedResource> L
@{
    Layout = "Layout";
    ViewData["Title"] = "Spotify ‚Üí Plex";

    var playlists = ViewBag.Playlists as List<(string Id, string Name)> ?? new List<(string Id, string Name)>();
    var hasPlex = !string.IsNullOrEmpty(Context.Session.GetString("PlexAuthToken"));
    var hasSpotify = !string.IsNullOrEmpty(Context.Session.GetString("SpotifyAccessToken"));
}

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.Name">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>@ViewData["Title"]</title>
</head>

<body class="min-h-screen bg-gradient-to-b from-[#0b0f17] to-[#141a27] text-white font-sans">

    <div class="max-w-xl mx-auto mt-16 p-8 bg-white/5 rounded-3xl shadow-xl backdrop-blur-sm text-center">

        <div class="flex justify-center mb-4">
            <img src="/images/plex-spotify.svg" alt="Spotify‚ÜíPlex"
                 class="h-20 w-auto mx-auto drop-shadow-[0_0_8px_rgba(255,160,0,0.4)]"
                 style="max-height:80px;" />
        </div>

        <h1 class="text-3xl font-bold mb-3">Spotify ‚Üí Plex</h1>
        <p class="text-gray-300 mb-8">@L["PlexActions_SyncSpotifyPlaylistsWithPlex"]</p>

        <!-- ================================
        STATUS / CONNECTION INFO
        ================================== -->
        @if (!hasPlex)
        {
            <div class="bg-red-600/30 border border-red-500 rounded-lg p-3 mb-4">
                ‚ö†Ô∏è @L["SpotifyToPlex_TokenExpired"]
            </div>
            <a href="/HomePlex/GetPlexPin"
               class="inline-block px-4 py-2 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg text-white font-semibold hover:brightness-110">
                üîê @L["SpotifyToPlex_OpenPlexLogin"]
            </a>
        }
        else if (!hasSpotify)
        {
            <div class="bg-yellow-600/20 border border-yellow-500 rounded-lg p-3 mb-4">
                üéß @L["SpotifyToPlex_Info"]
            </div>
            <a href="/Home/Login?returnUrl=/HomePlex/SpotifyToPlex"
               class="inline-block px-4 py-2 bg-gradient-to-r from-green-400 to-emerald-600 rounded-lg text-black font-semibold hover:brightness-110">
                üéµ @L["Index_Mit_Spotify_verbinden"]
            </a>
        }
        else if (playlists.Count == 0)
        {
            <p class="text-gray-400 mb-6">@L["SpotifyToPlex_Waiting"]</p>
            <div class="animate-spin h-6 w-6 border-2 border-t-transparent border-orange-500 rounded-full mx-auto"></div>
        }
        else
        {
            <!-- ================================
            SPOTIFY-PLAYLIST DROPDOWN
            ================================== -->
            <div class="text-left mb-6">
                <label for="playlistSelect" class="block text-sm text-gray-400 mb-2">
                    @L["SpotifyToPlex_SelectPlaylist"]
                </label>

                <div class="flex space-x-2">
                    <select id="playlistSelect" name="playlistId"
                            class="flex-1 bg-gray-800 border border-gray-700 rounded-lg p-2 w-full focus:ring-2 focus:ring-orange-500">
                        @foreach (var (id, name) in playlists)
                        {
                            <option value="@id">@name</option>
                        }
                    </select>

                    <button type="button" id="btnShowPlaylist"
                            class="px-3 bg-orange-500 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                            title="@L["Playlist anzeigen"]">
                        ?
                    </button>
                </div>
            </div>

            <hr class="my-8 border-gray-700">

            <!-- ================================
            PLEX-PLAYLIST DROPDOWN
            ================================== -->
            <div class="text-left mb-6">
                <label for="plexSelect" class="block text-sm text-gray-400 mb-2">
                    @L["PlexActions_PlexPlaylists_Title"]
                </label>

                <div class="flex space-x-2">
                    <select id="plexSelect"
                            class="flex-1 bg-gray-800 border border-gray-700 rounded-lg p-2 w-full focus:ring-2 focus:ring-orange-500">
                        <option>@L["PlexActions_LoadingPlexPlaylists"]...</option>
                    </select>

                    <button type="button" id="btnShowPlexPlaylist"
                            class="px-3 bg-orange-500 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                            title="@L["Playlist anzeigen"]">
                        ?
                    </button>

                    <button type="button" id="btnDeletePlex"
                            class="px-3 bg-red-600 hover:brightness-110 rounded-lg text-white font-bold text-lg shadow-lg"
                            title="@L["Playlist l√∂schen"]">
                        üóëÔ∏è
                    </button>
                </div>
            </div>

            <!-- Playlist exportieren -->
            <form method="post" action="/HomePlex/ExportOne" class="mb-3">
                @Html.AntiForgeryToken()
                <input type="hidden" name="playlistName" id="selectedPlaylistName" />
                <input type="hidden" name="playlistId" id="selectedPlaylistId" />
                <button type="submit"
                        class="w-full py-3.5 bg-gradient-to-r from-yellow-400 to-orange-500
                                           text-black font-semibold rounded-xl shadow-[0_4px_12px_rgba(0,0,0,0.3)]
                                           hover:brightness-110 active:translate-y-[1px] transition-all duration-150">
                    üì§ @L["PlexActions_ExportPlaylists"]
                </button>
            </form>

            <!-- Alle exportieren -->
            <form method="post" action="/HomePlex/ExportAll" class="mb-3">
                @Html.AntiForgeryToken()
                <button type="submit"
                        class="w-full py-3.5 bg-gradient-to-r from-orange-500 to-red-600
                                           text-white font-semibold rounded-xl shadow-[0_4px_12px_rgba(0,0,0,0.3)]
                                           hover:brightness-110 active:translate-y-[1px] transition-all duration-150">
                    üîÅ @L["SpotifyToPlex_ExportAll"]
                </button>
            </form>

            <!-- Disconnect -->
            <form method="post" action="/HomePlex/DisconnectPlex">
                @Html.AntiForgeryToken()
                <button type="submit"
                        class="w-full py-3.5 bg-gradient-to-r from-gray-600 to-gray-800
                                           text-white font-semibold rounded-xl shadow-[0_4px_12px_rgba(0,0,0,0.3)]
                                           hover:brightness-110 active:translate-y-[1px] transition-all duration-150">
                    üóëÔ∏è @L["PlexActions_Disconnect"]
                </button>
            </form>
        }
    </div>

    <!-- ================================
    MODAL: Playlist Inhalt
    ================================== -->
    <div id="playlistModal" class="hidden fixed inset-0 bg-black/70 flex items-center justify-center z-50">
        <div class="bg-gray-900 p-6 rounded-2xl shadow-2xl max-w-lg w-full text-left text-white">
            <h2 class="text-xl font-semibold mb-3">@L["Playlist_Inhalt"]</h2>
            <div id="playlistTracks" class="max-h-96 overflow-y-auto space-y-1 text-sm text-gray-300 mb-4"></div>
            <button id="closeModal"
                    class="w-full py-2 bg-gradient-to-r from-gray-700 to-gray-800 rounded-lg hover:brightness-110">
                OK
            </button>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const select = document.getElementById("playlistSelect");
            const nameInput = document.getElementById("selectedPlaylistName");
            const idInput = document.getElementById("selectedPlaylistId");

            if (select && select.options.length > 0) {
                const opt = select.options[0];
                nameInput.value = opt.text;
                idInput.value = opt.value;
            }

            select?.addEventListener("change", () => {
                const opt = select.options[select.selectedIndex];
                nameInput.value = opt.text;
                idInput.value = opt.value;
            });

            // Spotify Playlist anzeigen
            document.getElementById("btnShowPlaylist")?.addEventListener("click", async () => {
                const playlistId = select.value;
                const modal = document.getElementById("playlistModal");
                const listDiv = document.getElementById("playlistTracks");
                listDiv.innerHTML = "<div class='text-center text-gray-400'>Lade Inhalte‚Ä¶</div>";
                modal.classList.remove("hidden");

                try {
                    const res = await fetch(`/HomePlex/GetPlaylistTracks?playlistId=${encodeURIComponent(playlistId)}`);
                    const data = await res.json();
                    listDiv.innerHTML = data.success
                        ? (data.tracks.length
                            ? data.tracks.map(t => `<div>üéµ <b>${t.title}</b> ‚Äì ${t.artist}</div>`).join("")
                            : "<div class='text-gray-400'>Keine Titel gefunden.</div>")
                        : `<div class='text-red-400'>${data.message}</div>`;
                } catch {
                    listDiv.innerHTML = "<div class='text-red-400'>Fehler beim Laden.</div>";
                }
            });

            document.getElementById("closeModal")?.addEventListener("click", () => {
                document.getElementById("playlistModal").classList.add("hidden");
            });

            // Plex Playlists laden
            loadPlexPlaylistsDropdown();
        });

        // Plex Playlists als Dropdown laden
        async function loadPlexPlaylistsDropdown() {
            const plexSelect = document.getElementById("plexSelect");
            plexSelect.innerHTML = "<option>@L["PlexActions_LoadingPlexPlaylists"]...</option>";

            try {
                const res = await fetch("/HomePlex/GetPlexPlaylists");
                const data = await res.json();

                if (!data.success) {
                    plexSelect.innerHTML = `<option class='text-red-400'>${data.message}</option>`;
                    return;
                }

                plexSelect.innerHTML = data.playlists.length
                    ? data.playlists.map(p => `<option value="${p.ratingKey}">${p.title ?? "<NoName>"}</option>`).join("")
                    : "<option>@L["PlexActions_NoPlexPlaylists"]</option>";
            } catch {
                plexSelect.innerHTML = `<option class='text-red-400'>Fehler beim Laden</option>`;
            }
        }

        // Plex Playlist anzeigen
        document.getElementById("btnShowPlexPlaylist")?.addEventListener("click", async () => {
            const plexSelect = document.getElementById("plexSelect");
            const ratingKey = plexSelect.value;
            if (!ratingKey) return;

            const modal = document.getElementById("playlistModal");
            const listDiv = document.getElementById("playlistTracks");
            modal.classList.remove("hidden");
            listDiv.innerHTML = "<div class='text-center text-gray-400'>Lade Titel‚Ä¶</div>";

            const res = await fetch(`/HomePlex/GetPlexPlaylistTracks?ratingKey=${encodeURIComponent(ratingKey)}`);
            const data = await res.json();

            listDiv.innerHTML = data.success
                ? (data.tracks.length
                    ? data.tracks.map(t => `<div>üéµ <b>${t.title}</b> ‚Äì ${t.artist}</div>`).join("")
                    : "<div class='text-gray-400'>Keine Titel gefunden.</div>")
                : `<div class='text-red-400'>${data.message}</div>`;
        });

        // Plex Playlist l√∂schen
        document.getElementById("btnDeletePlex")?.addEventListener("click", async () => {
            const plexSelect = document.getElementById("plexSelect");
            const ratingKey = plexSelect.value;
            const title = plexSelect.options[plexSelect.selectedIndex]?.text;
            if (!ratingKey || title.includes("Lade")) return;

            if (!confirm(`@L["PlexActions_ConfirmDelete"] "${title}"?`)) return;

            await fetch("/HomePlex/DeletePlexPlaylist", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `ratingKey=${encodeURIComponent(ratingKey)}`
            });
            await loadPlexPlaylistsDropdown();
        });
    </script>

</body>
</html>
