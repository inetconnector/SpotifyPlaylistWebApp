@using System.Globalization
@using Microsoft.Extensions.Localization
@using SpotifyPlaylistWebApp
@await Html.PartialAsync("LanguageSwitcher")
@inject IStringLocalizer<SharedResource> L
@inject IJsonHelper Json
@{
    Layout = null;
    var user = ViewBag?.User as string ?? "Spotify User";
}
<!doctype html>
<html lang="@CultureInfo.CurrentUICulture.Name">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>@L["Dashboard_Dashboard_InetConnector_Playlist_Generator_nutzt"]</title>
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        body {
            background: radial-gradient(1000px 600px at 20% 10%, rgba(16,185,129,0.25), transparent 60%), radial-gradient(900px 600px at 90% 0%, rgba(99,102,241,0.25), transparent 60%), #0b0f17;
            color: white;
            font-family: system-ui, sans-serif;
        }

        .glass {
            background: rgba(255,255,255,0.08);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255,255,255,0.12);
        }

        .btn {
            position: relative;
            display: inline-flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 0.35rem;
            width: 9rem;
            height: 9rem;
            border-radius: 1.1rem;
            font-size: 1.05rem;
            font-weight: 600;
            color: white;
            text-decoration: none;
            background: linear-gradient(145deg, rgba(255,255,255,0.06), rgba(255,255,255,0.1));
            border: 1px solid rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            box-shadow: 0 0 12px rgba(16,185,129,0.25);
            transition: all 0.25s ease;
        }

            .btn:hover {
                background: linear-gradient(145deg, rgba(16,185,129,0.28), rgba(99,102,241,0.22));
                transform: translateY(-3px) scale(1.03);
                box-shadow: 0 0 26px rgba(16,185,129,0.4);
            }

            .btn span.icon {
                font-size: 1.9rem;
                filter: drop-shadow(0 0 6px rgba(16,185,129,0.55));
            }

        .status-text {
            font-size: 0.8rem;
            color: #9CA3AF;
            margin-top: 0.2rem;
        }

        .status-ready {
            color: #10B981;
        }

        .status-wait {
            color: #F59E0B;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeInUp 0.8s ease forwards;
        }

        .delay-1 {
            animation-delay: 0.2s;
        }

        .delay-2 {
            animation-delay: 0.4s;
        }

        .delay-3 {
            animation-delay: 0.6s;
        }
    </style>
</head>

<body class="min-h-screen flex flex-col">
    <main class="flex-grow max-w-4xl mx-auto px-6 py-16">
        <div class="glass rounded-3xl p-8 md:p-10 shadow-xl text-center">
            <h1 class="text-3xl md:text-4xl font-bold mb-2 fade-in">Welcome, @user 👋</h1>
            <p class="text-white/70 mb-8 fade-in delay-1">
                @L["Dashboard_Erstelle_automatisch_deine_Spotify_Playlists_mit"]
            </p>

            <div id="playlistContainer" class="mt-8 text-center">
                <label for="playlistSelect" class="block mb-2 text-lg font-semibold text-white">
                    @L["Dashboard_Source_Label"]
                </label>

                <select id="playlistSelect" name="playlistSelect"
                        class="bg-gray-800 text-white border border-gray-700 rounded-lg px-4 py-2 w-72 focus:ring-emerald-500 focus:border-emerald-500">
                    <option value="LikedSongs">@L["Dashboard_Source_LikedSongs"].Value</option>
                    @if (ViewBag.Playlists != null)
                    {
                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.Playlists)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>

                <p class="text-sm text-gray-400 mt-2">@L["Dashboard_Source_Description"]</p>
            </div>

            <div class="flex flex-wrap justify-center gap-7 mt-8 fade-in delay-2">
                <div class="flex flex-col items-center">
                    <a id="btnAlt" href="/Home/CreateAlternativeFavorites" class="btn" data-action="alt">
                        <span class="icon">🎶</span><span>@L["Btn_Alternative_Favorites"]</span>
                    </a>
                    <span class="status-text" id="status-alt">🟢 bereit</span>
                </div>

                <div class="flex flex-col items-center">
                    <a id="btnReco" href="/Home/CreateRecommendations" class="btn" data-action="reco">
                        <span class="icon">✨</span><span>@L["Btn_Recommendations"]</span>
                    </a>
                    <span class="status-text" id="status-reco">🟢 bereit</span>
                </div>

                <div class="flex flex-col items-center">
                    <a id="btnTop" href="/Home/CreateTopList" class="btn" data-action="top">
                        <span class="icon">📈</span><span>@L["Btn_Most_Listened"]</span>
                    </a>
                    <span class="status-text" id="status-top">🟢 bereit</span>
                </div>

                <div class="flex flex-col items-center">
                    <a id="btnClone" href="/Home/CloneLikedSongs" class="btn" data-action="clone">
                        <span class="icon">📜</span><span>@L["Btn_Liked_Clone"]</span>
                    </a>
                    <span class="status-text" id="status-clone">🟢 bereit</span>
                </div>

                <div class="flex flex-col items-center">
                    <a id="btnMix" href="/Home/CreateFavMix" class="btn" data-action="mix">
                        <span class="icon">🔀</span><span>@L["Btn_Liked_Shuffle"]</span>
                    </a>
                    <span class="status-text" id="status-mix">🟢 bereit</span>
                </div>
            </div>

            <p class="mt-10 text-white/70 text-sm">
                @L["Dashboard_Jede_Aktion_erstellt_eine_neue_Playlist_in_deine"]<br />
                @L["Dashboard_Die_Erstellung_erfolgt_im_Hintergrund_und_dauert"]
            </p>
        </div>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const playlistSelect = document.getElementById("playlistSelect");
            const btns = document.querySelectorAll('.btn[data-action]');
            const DEFAULT_COOLDOWN_SEC = 300;
            const now = () => Date.now();
            const STORAGE_KEY = "spotify:lastPlaylist";

            const getPlaylistKey = () => playlistSelect?.value || "none";
            const getPlaylistName = () => playlistSelect?.options[playlistSelect.selectedIndex]?.text || "";
            const cdKey = (action, playlistKey) => `cooldown:${action}:${encodeURIComponent(playlistKey)}`;

            const getUntil = key => parseInt(localStorage.getItem(key) || "0", 10) || 0;
            const setUntil = (key, ms) => localStorage.setItem(key, String(ms));
            const clearUntil = key => localStorage.removeItem(key);

            function applyCooldownVisual(btn, msRemaining) {
                const action = btn.dataset.action;
                const status = document.getElementById(`status-${action}`);
                if (msRemaining > 0) {
                    const seconds = Math.ceil(msRemaining / 1000);
                    btn.style.opacity = "0.6";
                    btn.style.pointerEvents = "none";
                    status.textContent = `⏳ ${seconds}s`;
                    status.classList.add("status-wait");
                    status.classList.remove("status-ready");
                } else {
                    btn.style.opacity = "";
                    btn.style.pointerEvents = "";
                    status.textContent = "🟢 bereit";
                    status.classList.add("status-ready");
                    status.classList.remove("status-wait");
                }
            }

            function updateLinks() {
                const selectedName = getPlaylistName();
                const encoded = encodeURIComponent(selectedName);
                document.getElementById("btnAlt").href   = "/Home/CreateAlternativeFavorites?playlistName=" + encoded;
                document.getElementById("btnMix").href   = "/Home/CreateFavMix?playlistName=" + encoded;
                document.getElementById("btnClone").href = "/Home/CloneLikedSongs?playlistName=" + encoded;
                document.getElementById("btnReco").href  = "/Home/CreateRecommendations?playlistName=" + encoded;
                document.getElementById("btnTop").href   = "/Home/CreateTopList?playlistName=" + encoded;
            }

            const tickOnce = () => {
                const pKey = getPlaylistKey();
                const t = now();
                btns.forEach(btn => {
                    const key = cdKey(btn.dataset.action, pKey);
                    const until = getUntil(key);
                    const remain = Math.max(0, until - t);
                    applyCooldownVisual(btn, remain);
                    if (remain === 0 && until) clearUntil(key);
                });
            };

            let tickTimer = null;
            function startCooldownTicker() {
                if (tickTimer) clearInterval(tickTimer);
                tickOnce();
                tickTimer = setInterval(tickOnce, 1000);
            }

            btns.forEach(btn => {
                btn.addEventListener("click", ev => {
                    const pKey = getPlaylistKey();
                    const key = cdKey(btn.dataset.action, pKey);
                    const until = getUntil(key);
                    const t = now();

                    if (until && until > t) {
                        ev.preventDefault();
                        btn.animate(
                            [{transform:'translateX(0)'},{transform:'translateX(-4px)'},{transform:'translateX(4px)'},{transform:'translateX(0)'}],
                            {duration:250}
                        );
                        return;
                    }

                    setUntil(key, t + DEFAULT_COOLDOWN_SEC * 1000);
                }, { capture: true });
            });

            function onPlaylistChanged() {
                const selectedValue = getPlaylistKey();
                localStorage.setItem(STORAGE_KEY, selectedValue);
                updateLinks();
                tickOnce();
            }

            playlistSelect.addEventListener("change", onPlaylistChanged);
            playlistSelect.addEventListener("input", onPlaylistChanged);

            const savedValue = localStorage.getItem(STORAGE_KEY);
            if (savedValue) {
                const option = Array.from(playlistSelect.options).find(o => o.value === savedValue);
                if (option) playlistSelect.value = savedValue;
            }

            updateLinks();
            startCooldownTicker();
        });
    </script>

</body>
</html>
