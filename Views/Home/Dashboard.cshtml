@using System.Globalization
@using System.Text.Json
@using Microsoft.Extensions.Localization
@using SpotifyPlaylistWebApp
@await Html.PartialAsync("LanguageSwitcher")
@inject IStringLocalizer<SharedResource> L
@inject IJsonHelper Json
@{
    Layout = null;
    var user = ViewBag?.User as string ?? "Spotify User";
}
<!doctype html>
<html lang="@CultureInfo.CurrentUICulture.Name">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1"/>
    <title>@L["Dashboard_Dashboard_InetConnector_Playlist_Generator_nutzt"]</title>
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        body {
            background: radial-gradient(1000px 600px at 20% 10%, rgba(16,185,129,0.25), transparent 60%), radial-gradient(900px 600px at 90% 0%, rgba(99,102,241,0.25), transparent 60%), #0b0f17;
            color: white;
            font-family: system-ui, sans-serif;
        }

        .glass {
            background: rgba(255,255,255,0.08);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255,255,255,0.12);
        }

        a {
            color: #10b981;
            text-decoration: underline;
        }

            a:hover {
                color: #34d399;
            }

        .btn {
            position: relative;
            display: inline-flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 0.35rem;
            width: 9rem;
            height: 9rem;
            border-radius: 1.1rem;
            font-size: 1.05rem;
            font-weight: 600;
            color: white;
            text-decoration: none;
            background: linear-gradient(145deg, rgba(255,255,255,0.06), rgba(255,255,255,0.1));
            border: 1px solid rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            box-shadow: 0 0 12px rgba(16,185,129,0.25);
            transition: all 0.25s ease;
        }

            .btn:hover {
                background: linear-gradient(145deg, rgba(16,185,129,0.28), rgba(99,102,241,0.22));
                transform: translateY(-3px) scale(1.03);
                box-shadow: 0 0 26px rgba(16,185,129,0.4);
            }

            .btn span.icon {
                font-size: 1.9rem;
                filter: drop-shadow(0 0 6px rgba(16,185,129,0.55));
            }

            .btn[data-tip]::after {
                content: attr(data-tip);
                position: absolute;
                bottom: -2.6rem;
                left: 50%;
                transform: translateX(-50%) translateY(6px);
                background: rgba(0,0,0,0.8);
                color: #fff;
                padding: 0.4rem 0.7rem;
                border-radius: 0.5rem;
                font-size: 0.75rem;
                white-space: nowrap;
                opacity: 0;
                transition: all 0.25s ease;
            }

            .btn:hover::after {
                opacity: 1;
                transform: translate(-50%,0);
            }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeInUp 0.8s ease forwards;
        }

        .delay-1 {
            animation-delay: 0.2s;
        }

        .delay-2 {
            animation-delay: 0.4s;
        }

        .delay-3 {
            animation-delay: 0.6s;
        }
    </style>
</head>

<body class="min-h-screen flex flex-col">
<main class="flex-grow max-w-4xl mx-auto px-6 py-16">
    <div class="glass rounded-3xl p-8 md:p-10 shadow-xl text-center">
        <h1 class="text-3xl md:text-4xl font-bold mb-2 fade-in">Welcome, @user ðŸ‘‹</h1>
        <p class="text-white/70 mb-8 fade-in delay-1">
            @L["Dashboard_Erstelle_automatisch_deine_Spotify_Playlists_mit"]
        </p>

        <!-- ðŸ”¹ Source type selector -->
        <div class="fade-in delay-1 mb-8">
            <label for="sourceType" class="block text-sm font-semibold mb-2">
                @L["SpotifyToPlex_SourceType"]
            </label>

            <select id="sourceType" class="text-black rounded px-3 py-2 w-64">
                <option value="liked">@L["SpotifyToPlex_SourceLiked"]</option>
                <option value="playlist">@L["SpotifyToPlex_SourcePlaylist"]</option>
            </select>

            <!-- Playlist selection (hidden by default) -->
            <div id="playlistContainer" class="mt-8 text-center hidden">
                <label for="playlistSelect" class="block mb-2 text-lg font-semibold text-white">
                    @L["Dashboard_Source_Label"]
                </label>

                <select id="playlistSelect"
                        name="playlistSelect"
                        class="bg-gray-800 text-white border border-gray-700 rounded-lg px-4 py-2 w-72 focus:ring-emerald-500 focus:border-emerald-500">
                    <option value="LikedSongs">@L["Dashboard_Source_LikedSongs"].Value</option>

                    @if (ViewBag.Playlists != null)
                    {
                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.Playlists)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>

                <p class="text-sm text-gray-400 mt-2">
                    @L["Dashboard_Source_Description"]
                </p>
            </div>
        </div>

        <!-- ðŸ”¸ Main buttons -->
        <div class="flex flex-wrap justify-center gap-7 mt-6 fade-in delay-2">
            <a id="btnClone" href="/Home/CloneLikedSongs" class="btn" data-action="clone" data-tip=@Html.Raw(JsonSerializer.Serialize(L["Desc_Liked_Clone"].Value))>
                <span class="icon">ðŸ“œ</span><span>@L["Btn_Liked_Clone"]</span>
            </a>
            <a id="btnAlt" href="/Home/CreateAlternativeFavorites" class="btn" data-action="alt" data-tip=@Html.Raw(JsonSerializer.Serialize(L["Desc_Alternative_Favorites"].Value))>
                <span class="icon">ðŸŽ¶</span><span>@L["Btn_Alternative_Favorites"]</span>
            </a>
            <a id="btnReco" href="/Home/CreateRecommendations" class="btn" data-action="reco" data-tip=@Html.Raw(JsonSerializer.Serialize(L["Desc_Recommendations"].Value))>
                <span class="icon">âœ¨</span><span>@L["Btn_Recommendations"]</span>
            </a>
            <a id="btnMix" href="/Home/CreateFavMix" class="btn" data-action="mix" data-tip=@Html.Raw(JsonSerializer.Serialize(L["Desc_Liked_Shuffle"].Value))>
                <span class="icon">ðŸ”€</span><span>@L["Btn_Liked_Shuffle"]</span>
            </a>
            <a id="btnTop" href="/Home/CreateTopList" class="btn" data-action="top" data-tip=@Html.Raw(JsonSerializer.Serialize(L["Desc_Most_Listened"].Value))>
                <span class="icon">ðŸ“ˆ</span><span>@L["Btn_Most_Listened"]</span>
            </a>
        </div>

        <p class="mt-10 text-white/70 text-sm">
            @L["Dashboard_Jede_Aktion_erstellt_eine_neue_Playlist_in_deine"]<br/>
            @L["Dashboard_Die_Erstellung_erfolgt_im_Hintergrund_und_dauert"]
        </p>
    </div>
</main>

<!-- ðŸ”§ Dynamic JavaScript logic -->
<script>
        document.addEventListener("DOMContentLoaded", () => {
            const sourceType = document.getElementById("sourceType");
            const playlistContainer = document.getElementById("playlistContainer");
            const playlistSelect = document.getElementById("playlistSelect");
            const btns = document.querySelectorAll('.btn[data-action]');

            // Localized text sets for buttons
            const txtLiked = {
                clone: @Html.Raw(JsonSerializer.Serialize(L["Btn_Liked_Clone"].Value)),
                alt: @Html.Raw(JsonSerializer.Serialize(L["Btn_Alternative_Favorites"].Value)),
                mix: @Html.Raw(JsonSerializer.Serialize(L["Btn_Liked_Shuffle"].Value))
            };
            const txtPlaylist = {
                clone: @Html.Raw(JsonSerializer.Serialize(L["Btn_Playlist_Clone"].Value)),
                alt: @Html.Raw(JsonSerializer.Serialize(L["Btn_Alternative_Playlist"].Value)),
                mix: @Html.Raw(JsonSerializer.Serialize(L["Btn_Playlist_Shuffle"].Value))
            };

            // Update labels + target URLs when switching between "Liked Songs" and "Playlist"
            function updateUI() {
                const usePlaylist = sourceType.value === "playlist";
                playlistContainer.classList.toggle("hidden", !usePlaylist);

                btns.forEach(btn => {
                    const action = btn.dataset.action;
                    const label = btn.querySelector('span:last-child');
                    if (usePlaylist && txtPlaylist[action]) label.textContent = txtPlaylist[action];
                    if (!usePlaylist && txtLiked[action]) label.textContent = txtLiked[action];
                });

                updateLinks();
            }

            // Append selected playlist name to action links
            function updateLinks() {
                const selectedName = playlistSelect.options[playlistSelect.selectedIndex]?.text || "";
                const encoded = encodeURIComponent(selectedName);

                document.getElementById("btnAlt").href = "/Home/CreateAlternativeFavorites?playlistName=" + encoded;
                document.getElementById("btnMix").href = "/Home/CreateFavMix?playlistName=" + encoded;
                document.getElementById("btnClone").href = "/Home/CloneLikedSongs?playlistName=" + encoded;
            }

            sourceType.addEventListener("change", updateUI);
            playlistSelect.addEventListener("change", updateLinks);

            updateUI();
        });
    </script>
</body>
</html>